# IEEE 1788 Interval Arithmetic native library for Ada
# Copyright (C) 2024,2025 Torsten Knodt

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

# As a special exception to the GNU Lesser General Public License version 3
# ("LGPL3"), the copyright holders of this Library give you permission to convey
# to a third party a Combined Work that links statically or dynamically to this
# Library without providing any Minimal Corresponding Source or Minimal
# Application Code as set out in 4d or providing the installation information set
# out in section 4e, provided that you comply with the other provisions of LGPL3
# and provided that you meet, for the Application the terms and conditions of the
# license(s) which apply to the Application.

# Except as stated in this special exception, the provisions of LGPL3 will
# continue to comply in full to this Library. If you modify this Library, you
# may apply this exception to your version of this Library, but you are not
# obliged to do so. If you do not wish to do so, delete this exception statement
# from your version. This exception does not (and cannot) modify any license terms
# which apply to the Application, with which you must still comply.

trigger:
  batch: true
  branches:
    include:
      - "*"
  tags:
    include:
      - "*"

pr:
  autoCancel: true
  branches:
    include:
      - "*"

pool:
  vmImage: ubuntu-latest

jobs:
  - job: DownLoadAlire
    steps:
      - checkout: none
      - task: DownloadAFile@2
        inputs:
          strUrl: "https://github.com/alire-project/alire/releases/download/v2.0.1/alr-2.0.1-bin-x86_64-linux.zip"
          strTargetDir: "$(System.DefaultWorkingDirectory)"
          strTargetFilename: "alr-2.0.1-bin-x86_64-linux.zip"
          authType: "noAuth"
          ignoreCertificateChecks: false
          catchResponse: true
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: "$(System.DefaultWorkingDirectory)/alr-2.0.1-bin-x86_64-linux.zip"
          destinationFolder: "$(System.DefaultWorkingDirectory)"
          cleanDestinationFolder: false # Else the downloaded file gets deleted
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: "$(System.DefaultWorkingDirectory)/bin/alr"
          artifact: "alr"
          publishLocation: "pipeline"
  - job: GNATprove
    dependsOn:
      - DownLoadAlire
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: "current"
          artifactName: "alr"
          targetPath: "$(Pipeline.Workspace)"
      - bash: chmod ugo+x $(Pipeline.Workspace)/alr
      - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory) --non-interactive build --validation
        displayName: Alire Validation Build
      - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory) --non-interactive gnatprove --proof=progressive:all --level=4 -j0 --checks-as-errors=on --warnings=error
        displayName: Alire GNATprove
      - task: PublishPipelineArtifact@1
        condition: succeededOrFailed()
        inputs:
          targetPath: "$(Build.SourcesDirectory)/obj/validation/gnatprove/gnatprove.out"
          artifact: "gnatprove.out"
  - job: Test
    dependsOn:
      - DownLoadAlire
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: "current"
          artifactName: "alr"
          targetPath: "$(Pipeline.Workspace)"
      - bash: chmod ugo+x $(Pipeline.Workspace)/alr
      - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory)/tests --non-interactive --force build --validation --stop-after=generation
        displayName: Alire Generate Configuration
      - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory)/tests --non-interactive --force gnatcov instrument --level=stmt+mcdc --dump-trigger=atexit --projects=ieee1788.gpr
        displayName: Alire GNATcov Instrument
      - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory)/tests --non-interactive --force build --validation -- --src-subdirs=gnatcov-instr --implicit-with=gnatcov_rts_full
        displayName: Alire Build Instrumented Test Code
      - bash: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory)/tests --non-interactive --force run --skip-build --args "$(Common.TestResultsDirectory)/aunit_results.xml"
        env:
          GNATCOV_TRACE_FILE: $(Common.TestResultsDirectory)/
        displayName: Alire Run Instrumented Tests
      - task: PublishPipelineArtifact@1
        condition: succeededOrFailed()
        inputs:
          targetPath: "$(Common.TestResultsDirectory)/aunit_results.xml"
          artifact: "aunit_results.xml"
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "$(Common.TestResultsDirectory)/aunit_results.xml"
          searchFolder:
          failTaskOnFailedTests: true
          failTaskOnFailureToPublishResults: true
          failTaskOnMissingResultsFile: true
      - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory)/tests --non-interactive --force gnatcov coverage --annotate=xcov+ --output-dir $(Common.TestResultsDirectory)/gnatcov_out --level=stmt+mcdc --projects ieee1788.gpr $(Common.TestResultsDirectory)/*.srctrace
        condition: succeededOrFailed()
        displayName: Alire GNATcov Report XCOV+
      # FIXME #158
      #  - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory)/tests --non-interactive --force gnatcov coverage --annotate=dhtml --output-dir $(Common.TestResultsDirectory)/gnatcov_out --level=stmt+mcdc --projects ieee1788.gpr $(Common.TestResultsDirectory)/*.srctrace
      #    condition: succeededOrFailed()
      #    displayName: Alire GNATcov Report DHTML
      - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory)/tests --non-interactive --force gnatcov coverage --annotate=html+ --output-dir $(Common.TestResultsDirectory)/gnatcov_out --level=stmt+mcdc --projects ieee1788.gpr $(Common.TestResultsDirectory)/*.srctrace
        condition: succeededOrFailed()
        displayName: Alire GNATcov Report HTML
      # FIXME #157
      #  - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory)/tests --non-interactive --force gnatcov coverage --annotate=sarif --output-dir $(Common.TestResultsDirectory)/gnatcov_out --level=stmt+mcdc --projects ieee1788.gpr $(Common.TestResultsDirectory)/*.srctrace
      #    condition: succeededOrFailed()
      #    displayName: Alire GNATcov Report Sarif
      - task: PublishPipelineArtifact@1
        condition: succeededOrFailed()
        inputs:
          targetPath: "$(Common.TestResultsDirectory)/gnatcov_out"
          artifact: "gnatcov_out"
      - task: PublishCodeCoverageResults@2
        condition: succeededOrFailed()
        inputs:
          summaryFileLocation: "$(Common.TestResultsDirectory)/gnatcov_out/*.*"
          failIfCoverageEmpty: true
# FIXME #160
# - job: Publish
#   dependsOn: DownLoadAlire
#   steps:
#   - checkout: self
#     fetchDepth: 0
#   - task: DownloadPipelineArtifact@2
#     inputs:
#       buildType: 'current'
#       artifactName: 'alr'
#       targetPath: '$(Pipeline.Workspace)'
#   - bash: chmod ugo+x $(Pipeline.Workspace)/alr
#     displayName: Fix alr binary permissions
#   - script: $(Pipeline.Workspace)/alr --chdir=$(Build.SourcesDirectory) --non-interactive --force publish --tar --skip-submit . $(Build.SourceVersion)
#     displayName: Alire Publish
#   - task: PublishPipelineArtifact@1
#     inputs:
#       targetPath: '$(Build.SourcesDirectory)/alire/archive/'
#       publishLocation: 'pipeline'
